/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.javaproject10;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;


/**
 *
 * @author prosa
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        loadAllUsers();

        // Initialize the ButtonGroup
        ButtonGroup sexeButtonGroup = new ButtonGroup();

        // Add the JRadioButton instances to the ButtonGroup
        sexeButtonGroup.add(sexeHomme_radioButton);
        sexeButtonGroup.add(sexeFemme_radioButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EmployeeID_textField = new javax.swing.JTextField();
        EmployeeID_label = new javax.swing.JLabel();
        name_textField = new javax.swing.JTextField();
        name_label = new javax.swing.JLabel();
        bloodGroup_textField = new javax.swing.JTextField();
        bloodGroup_label = new javax.swing.JLabel();
        sexeHomme_radioButton = new javax.swing.JRadioButton();
        sexeFemme_radioButton = new javax.swing.JRadioButton();
        sexe_label = new javax.swing.JLabel();
        contactNo_textField = new javax.swing.JTextField();
        contactNo_label = new javax.swing.JLabel();
        qualification_comboBox = new javax.swing.JComboBox<>();
        qualification_label = new javax.swing.JLabel();
        DOJ_dateChooser = new com.toedter.calendar.JDateChooser();
        DOJ_label = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        adress_textArea = new javax.swing.JTextArea();
        adress_label = new javax.swing.JLabel();
        upload_button = new javax.swing.JButton();
        imagePath_label = new javax.swing.JLabel();
        search_panel = new javax.swing.JPanel();
        search_label = new javax.swing.JLabel();
        search_textField = new javax.swing.JTextField();
        new_button = new javax.swing.JButton();
        save_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        clear_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        search_table = new javax.swing.JTable();
        picture_desktopPane = new javax.swing.JDesktopPane();
        age_label = new javax.swing.JLabel();
        age_spinner = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        imagePath_lextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Panel");
        setBounds(new java.awt.Rectangle(0, 0, 400, 400));

        EmployeeID_textField.setEditable(false);

        EmployeeID_label.setText("EmployeeID");

        name_label.setText("Name");

        bloodGroup_label.setText("BloodGroup");

        sexeHomme_radioButton.setText("Male");
        sexeHomme_radioButton.setToolTipText("");

        sexeFemme_radioButton.setText("Female");

        sexe_label.setText("Gender");

        contactNo_label.setText("ContactNO");

        qualification_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M.TECH", "B.TECH", "MBBS", "MCA", "B.COM", "PHD", "MBA", "BCA" }));

        qualification_label.setText("Qualification");

        DOJ_label.setText("DOJ");

        adress_textArea.setColumns(20);
        adress_textArea.setRows(5);
        adress_textArea.setMaximumSize(new java.awt.Dimension(13, 20));
        jScrollPane.setViewportView(adress_textArea);

        adress_label.setText("Adresse");

        upload_button.setBackground(new java.awt.Color(78, 89, 144));
        upload_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\image upload.png")); // NOI18N
        upload_button.setText("UPLOAD IMAGE");
        upload_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upload_buttonMouseClicked(evt);
            }
        });

        imagePath_label.setText("Image Path");

        search_panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));

        search_label.setText("Search");

        search_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_textFieldKeyPressed(evt);
            }
        });

        new_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\new-icon.png")); // NOI18N
        new_button.setText("New");
        new_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                new_buttonMouseClicked(evt);
            }
        });

        save_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\Save-icon.png")); // NOI18N
        save_button.setText("Save");

        update_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\update.png")); // NOI18N
        update_button.setText("Update");
        update_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update_buttonMouseClicked(evt);
            }
        });

        delete_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\delete.png")); // NOI18N
        delete_button.setText("Delete");
        delete_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delete_buttonMouseClicked(evt);
            }
        });

        clear_button.setIcon(new javax.swing.ImageIcon("C:\\Users\\prosa\\Documents\\3e\\JAVA\\javaproject10_tp\\lib\\icons\\clear.png")); // NOI18N
        clear_button.setText("Clear");
        clear_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clear_buttonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout search_panelLayout = new javax.swing.GroupLayout(search_panel);
        search_panel.setLayout(search_panelLayout);
        search_panelLayout.setHorizontalGroup(
            search_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(search_panelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(search_label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(new_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(save_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(delete_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clear_button)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        search_panelLayout.setVerticalGroup(
            search_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, search_panelLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(search_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(search_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(search_label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(new_button))
                    .addGroup(search_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(save_button)
                        .addComponent(update_button)
                        .addComponent(delete_button)
                        .addComponent(clear_button))))
        );

        search_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "EmployeeID", "Name", "Gender", "Age", "BloodGroup", "ContactNO", "Qualification", "DOJ", "Address", "ImageP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        search_table.setColumnSelectionAllowed(true);
        search_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(search_table);
        search_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (search_table.getColumnModel().getColumnCount() > 0) {
            search_table.getColumnModel().getColumn(0).setResizable(false);
            search_table.getColumnModel().getColumn(1).setResizable(false);
            search_table.getColumnModel().getColumn(2).setResizable(false);
            search_table.getColumnModel().getColumn(3).setResizable(false);
            search_table.getColumnModel().getColumn(4).setResizable(false);
            search_table.getColumnModel().getColumn(5).setResizable(false);
            search_table.getColumnModel().getColumn(6).setResizable(false);
            search_table.getColumnModel().getColumn(7).setResizable(false);
            search_table.getColumnModel().getColumn(8).setResizable(false);
            search_table.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout picture_desktopPaneLayout = new javax.swing.GroupLayout(picture_desktopPane);
        picture_desktopPane.setLayout(picture_desktopPaneLayout);
        picture_desktopPaneLayout.setHorizontalGroup(
            picture_desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );
        picture_desktopPaneLayout.setVerticalGroup(
            picture_desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 313, Short.MAX_VALUE)
        );

        age_label.setText("Age");

        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        imagePath_lextField.setEditable(false);
        imagePath_lextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        imagePath_lextField.setDragEnabled(true);
        imagePath_lextField.setMaximumSize(new java.awt.Dimension(10, 10));
        imagePath_lextField.setMinimumSize(new java.awt.Dimension(5, 5));
        imagePath_lextField.setName(""); // NOI18N
        imagePath_lextField.setPreferredSize(new java.awt.Dimension(22, 22));
        jScrollPane2.setViewportView(imagePath_lextField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(search_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EmployeeID_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sexe_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(DOJ_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(age_label, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name_textField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(sexeHomme_radioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sexeFemme_radioButton))
                            .addComponent(EmployeeID_textField)
                            .addComponent(age_spinner)
                            .addComponent(DOJ_dateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(qualification_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(contactNo_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bloodGroup_label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(qualification_comboBox, 0, 170, Short.MAX_VALUE)
                            .addComponent(contactNo_textField)
                            .addComponent(bloodGroup_textField))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(adress_label, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(imagePath_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(upload_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(17, 17, 17)
                .addComponent(picture_desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(upload_button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(EmployeeID_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EmployeeID_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adress_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(name_textField)
                                    .addComponent(name_label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sexeHomme_radioButton)
                                    .addComponent(sexeFemme_radioButton)
                                    .addComponent(sexe_label, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(age_spinner)
                                    .addComponent(age_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bloodGroup_textField)
                                    .addComponent(bloodGroup_label, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(contactNo_textField)
                                    .addComponent(contactNo_label, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(qualification_comboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(qualification_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DOJ_dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DOJ_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(imagePath_label)
                                .addGap(11, 11, 11))))
                    .addComponent(picture_desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void loadAllUsers() {
        try {
            // Create an instance of dbConnection
            dbConnection db = new dbConnection();

            // Call the search method from dbConnection with an empty string as the parameter
            ResultSet rs = db.search("");

            // Create a DefaultTableModel and set it to search_table
            DefaultTableModel model = (DefaultTableModel) search_table.getModel();
            model.setRowCount(0); // Clear the table before adding new data

            // Loop through the ResultSet and add each row to the DefaultTableModel
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("EmployeeID"), rs.getString("Name"), rs.getString("Gender"), rs.getInt("Age"), rs.getString("BloodGroup"), rs.getString("ContactNO"), rs.getString("Qualification"), rs.getString("DOJ"), rs.getString("Address"), rs.getString("EmpImage")});
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void search_textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_textFieldKeyPressed
        try {
            // Create an instance of dbConnection
            dbConnection db = new dbConnection();

            // Get the text from search_textField
            String searchText = search_textField.getText();

            // Call the search method from dbConnection with the text as the parameter
            ResultSet rs = db.search(searchText);

            // Create a DefaultTableModel and set it to search_table
            DefaultTableModel model = (DefaultTableModel) search_table.getModel();
            model.setRowCount(0); // Clear the table before adding new data

            // Loop through the ResultSet and add each row to the DefaultTableModel
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("EmployeeID"), rs.getString("Name"), rs.getString("Gender"), rs.getInt("Age"), rs.getString("BloodGroup"), rs.getString("ContactNO"), rs.getString("Qualification"), rs.getString("DOJ"), rs.getString("Address"), rs.getString("EmpImage")});
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_search_textFieldKeyPressed

    private void upload_buttonMouseClicked(java.awt.event.MouseEvent evt) {
        // Open a file chooser to select an image and update the imagePath_lextField
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(new File("C:\\Users\\prosa\\OneDrive\\Images"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            imagePath_lextField.setText(selectedFile.getAbsolutePath());

            try {
                // Read the image into a BufferedImage
                BufferedImage image = ImageIO.read(selectedFile);

                // Convert the BufferedImage to bytes
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(image, "jpg", baos);
                byte[] bytes = baos.toByteArray();

                // Write the bytes to a .bin file
                FileOutputStream fos = new FileOutputStream("image.bin");
                fos.write(bytes);
                fos.close();

                // Read the .bin file into a byte array
                byte[] binBytes = Files.readAllBytes(Paths.get("image.bin"));

                // Convert the byte array back to a BufferedImage
                ByteArrayInputStream bais = new ByteArrayInputStream(binBytes);
                BufferedImage binImage = ImageIO.read(bais);

                // Create a JInternalFrame and set a preferred size
                JInternalFrame internalFrame = new JInternalFrame();
                internalFrame.setPreferredSize(new Dimension(300, 300)); // Set your preferred size

                // Add the JLabel to the JInternalFrame
                JLabel imageLabel = new JLabel(new ImageIcon(binImage));
                internalFrame.add(imageLabel);

                // Pack the JInternalFrame
                internalFrame.pack();

                // Add the JInternalFrame to the JDesktopPane
                picture_desktopPane.add(internalFrame);

                // Make the JInternalFrame visible
                internalFrame.setVisible(true);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void new_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_new_buttonMouseClicked
        // Check if all fields are filled
        if (!name_textField.getText().isEmpty() && (sexeHomme_radioButton.isSelected() || sexeFemme_radioButton.isSelected()) &&
            (Integer)age_spinner.getValue() > 0 && !bloodGroup_textField.getText().isEmpty() &&
            !contactNo_textField.getText().isEmpty() && qualification_comboBox.getSelectedItem() != null &&
            DOJ_dateChooser.getDate() != null && !adress_textArea.getText().isEmpty() && !imagePath_lextField.getText().isEmpty()) {

            // Get the values from the fields
            String name = name_textField.getText();
            String gender = sexeHomme_radioButton.isSelected() ? "Male" : "Female";
            Integer age = (Integer)age_spinner.getValue();
            String bloodGroup = bloodGroup_textField.getText();
            Integer contact = Integer.parseInt(contactNo_textField.getText());
            String qualification = (String)qualification_comboBox.getSelectedItem();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String doj = sdf.format(DOJ_dateChooser.getDate());
            String address = adress_textArea.getText();
            String image = imagePath_lextField.getText();

            try {
                // Create an instance of dbConnection
                dbConnection db = new dbConnection();

                // Call the insert method from dbConnection with the values as the parameters
                db.insert(name, gender, age, bloodGroup, contact, qualification, doj, address, image);

                // Clear the fields after successful insertion
                name_textField.setText("");
                sexeHomme_radioButton.setSelected(false);
                sexeFemme_radioButton.setSelected(false);
                age_spinner.setValue(0);
                bloodGroup_textField.setText("");
                contactNo_textField.setText("");
                qualification_comboBox.setSelectedIndex(0);
                DOJ_dateChooser.setDate(null);
                adress_textArea.setText("");
                imagePath_lextField.setText("");
                picture_desktopPane.removeAll();
                picture_desktopPane.repaint();

                // Reload the table to show the new user
                loadAllUsers();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_new_buttonMouseClicked

    private void search_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search_tableMouseClicked
        search_table.getSelectionModel().addListSelectionListener(event -> {
            // Check if a valid row is selected
            if (search_table.getSelectedRow() > -1) {
                // Get the data of the selected row
                int selectedRow = search_table.getSelectedRow();
                String employeeID = search_table.getValueAt(selectedRow, 0).toString();
                String name = search_table.getValueAt(selectedRow, 1).toString();
                String gender = search_table.getValueAt(selectedRow, 2).toString();
                int age = (int) search_table.getValueAt(selectedRow, 3);
                String bloodGroup = search_table.getValueAt(selectedRow, 4).toString();
                String contactNo = search_table.getValueAt(selectedRow, 5).toString();
                String qualification = search_table.getValueAt(selectedRow, 6).toString();
                String doj = search_table.getValueAt(selectedRow, 7).toString();
                String address = search_table.getValueAt(selectedRow, 8).toString();
                String imagePath = search_table.getValueAt(selectedRow, 9).toString();
//                byte[] imageBin = (byte[]) search_table.getValueAt(selectedRow, 9);
                // Set the values to the respective fields


                // Fill the fields with the data
                EmployeeID_textField.setText(employeeID);
                if (gender.equals("Male")) {
                    sexeHomme_radioButton.setSelected(true);
                    sexeFemme_radioButton.setSelected(false);
                } else {
                    sexeFemme_radioButton.setSelected(true);
                    sexeHomme_radioButton.setSelected(false);
                }
                age_spinner.setValue(age);
                name_textField.setText(name);
                bloodGroup_textField.setText(bloodGroup);
                contactNo_textField.setText(contactNo);
                qualification_comboBox.setSelectedItem(qualification);
                // Parse the date string to Date object and set it to the date chooser
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = sdf.parse(doj);
                    DOJ_dateChooser.setDate(date);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                adress_textArea.setText(address);
                imagePath_lextField.setText(imagePath);

//                try {
//                    // Convert the byte array back to a BufferedImage
////                    ByteArrayInputStream bais = new ByteArrayInputStream(imageBin);
//                    BufferedImage binImage = ImageIO.read(new File(imagePath));
//
//                    // Create a JInternalFrame and set a preferred size
//                    JInternalFrame internalFrame = new JInternalFrame();
//                    internalFrame.setPreferredSize(new Dimension(300, 300)); // Set your preferred size
//
//                    // Add the JLabel to the JInternalFrame
//                    JLabel imageLabel = new JLabel(new ImageIcon(imageBin));
//                    internalFrame.add(imageLabel);
//
//                    // Pack the JInternalFrame
//                    internalFrame.pack();
//
//                    // Add the JInternalFrame to the JDesktopPane
//                    picture_desktopPane.add(internalFrame);
//
//                    // Make the JInternalFrame visible
//                    internalFrame.setVisible(true);
//
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
            }
        });
    }//GEN-LAST:event_search_tableMouseClicked

    private void clear_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clear_buttonMouseClicked
        // Clear the fields
        EmployeeID_textField.setText("");
        name_textField.setText("");
        sexeHomme_radioButton.setSelected(false);
        sexeFemme_radioButton.setSelected(false);
        age_spinner.setValue(0);
        bloodGroup_textField.setText("");
        contactNo_textField.setText("");
        qualification_comboBox.setSelectedIndex(0);
        DOJ_dateChooser.setDate(null);
        adress_textArea.setText("");
        imagePath_lextField.setText("");
        picture_desktopPane.removeAll();
        picture_desktopPane.repaint();
    }//GEN-LAST:event_clear_buttonMouseClicked

    private void delete_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete_buttonMouseClicked
        // Check if a valid row is selected
        if (search_table.getSelectedRow() > -1) {
            // Get the selected EmployeeID
            String employeeID = search_table.getValueAt(search_table.getSelectedRow(), 0).toString();

            // Create an instance of dbConnection
            dbConnection db = new dbConnection();

            // Call the delete method from dbConnection with the EmployeeID as the parameter
            db.delete(employeeID);

            // Clear the fields after successful deletion
            EmployeeID_textField.setText("");
            name_textField.setText("");
            sexeHomme_radioButton.setSelected(false);
            sexeFemme_radioButton.setSelected(false);
            age_spinner.setValue(0);
            bloodGroup_textField.setText("");
            contactNo_textField.setText("");
            qualification_comboBox.setSelectedIndex(0);
            DOJ_dateChooser.setDate(null);
            adress_textArea.setText("");
            imagePath_lextField.setText("");
            picture_desktopPane.removeAll();
            picture_desktopPane.repaint();

            // Reload the table to show the new user
            loadAllUsers();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_delete_buttonMouseClicked

    private void update_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_buttonMouseClicked
        if (search_table.getSelectedRow() > -1) {
            // Get the values from the fields
            String name = name_textField.getText();
            String gender = sexeHomme_radioButton.isSelected() ? "Male" : "Female";
            Integer age = (Integer)age_spinner.getValue();
            String bloodGroup = bloodGroup_textField.getText();
            Integer contact = Integer.parseInt(contactNo_textField.getText());
            String qualification = (String)qualification_comboBox.getSelectedItem();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String doj = sdf.format(DOJ_dateChooser.getDate());
            String address = adress_textArea.getText();
            String image = imagePath_lextField.getText();
            Integer id = Integer.parseInt(EmployeeID_textField.getText());

            // Create an instance of dbConnection
            dbConnection db = new dbConnection();

            // Call the update method from dbConnection with the values as the parameters
            try {
                db.update(name, gender, age, bloodGroup, contact, qualification, doj, address, id);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }

            // Reload the table to show the updated user
            loadAllUsers();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_update_buttonMouseClicked
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DOJ_dateChooser;
    private javax.swing.JLabel DOJ_label;
    private javax.swing.JLabel EmployeeID_label;
    private javax.swing.JTextField EmployeeID_textField;
    private javax.swing.JLabel adress_label;
    private javax.swing.JTextArea adress_textArea;
    private javax.swing.JLabel age_label;
    private javax.swing.JSpinner age_spinner;
    private javax.swing.JLabel bloodGroup_label;
    private javax.swing.JTextField bloodGroup_textField;
    private javax.swing.JButton clear_button;
    private javax.swing.JLabel contactNo_label;
    private javax.swing.JTextField contactNo_textField;
    private javax.swing.JButton delete_button;
    private javax.swing.JLabel imagePath_label;
    private javax.swing.JTextField imagePath_lextField;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel name_label;
    private javax.swing.JTextField name_textField;
    private javax.swing.JButton new_button;
    private javax.swing.JDesktopPane picture_desktopPane;
    private javax.swing.JComboBox<String> qualification_comboBox;
    private javax.swing.JLabel qualification_label;
    private javax.swing.JButton save_button;
    private javax.swing.JLabel search_label;
    private javax.swing.JPanel search_panel;
    private javax.swing.JTable search_table;
    private javax.swing.JTextField search_textField;
    private javax.swing.JRadioButton sexeFemme_radioButton;
    private javax.swing.JRadioButton sexeHomme_radioButton;
    private javax.swing.JLabel sexe_label;
    private javax.swing.JButton update_button;
    private javax.swing.JButton upload_button;
    // End of variables declaration//GEN-END:variables
}
